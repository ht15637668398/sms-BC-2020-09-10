<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.SMS.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="com.SMS.domain.Student">
    <id column="sid" jdbcType="INTEGER" property="sid" />
    <result column="sno" jdbcType="VARCHAR" property="sno" />
    <result column="sname" jdbcType="VARCHAR" property="sname" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="CHAR" property="age" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="dorm" jdbcType="VARCHAR" property="dorm" />
    <result column="cno" jdbcType="INTEGER" property="cno" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="realname" jdbcType="VARCHAR" property="realname" />
  </resultMap>

<!--    根据学号查询学生信息-->
  <select id="selectBySno" resultType="Student">
    select * from t_student where sno = #{sno }
  </select>

<!--    查询对应寝室号的所有学生+他的班主任-->

  <select id="selectByDorm" resultType="Student">
        select s.sno,s.sname,s.phone,t.realname,c.cname from t_student s
        join t_class c
        on s.cno = c.cno
        join t_tearcher t
        on t.tid = c.headmaster where s.dorm = #{dorm}
  </select>
  

<!--    分页查询信息进行主页展示-->
  <select id="selectQuery" resultType="Student">

    select s.*,c.cname,u.username,u.userpwd
    from t_student s
    join t_class c on s.cno=c.cno
    join t_userlogin u on u.uid = s.uid
    <where>
        <choose>
            <when test="sno != null and sno !='' ">
                s.sno = #{sno}
            </when>
            <when test="sname != null and sname != '' ">
                s.sname like "%" #{sname } "%"
            </when>
            <when test="sex != null and sex != ''">
                s.sex = #{sex}
            </when>
            <when test="cname != null and cname != ''">
                c.cname like "%" #{cname} "%"
            </when>
        </choose>
    </where>
    order by sid asc
  </select>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sid, sno, sname, sex, age, phone, dorm, cno, uid
  </sql>
  <select id="selectByExample" parameterType="com.SMS.domain.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_student
    where sid = #{sid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_student
    where sid = #{sid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.SMS.domain.StudentExample">
    delete from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.SMS.domain.Student">
    insert into t_student (sid, sno, sname, 
      sex, age, phone, dorm, 
      cno, uid)
    values (#{sid,jdbcType=INTEGER}, #{sno,jdbcType=VARCHAR}, #{sname,jdbcType=VARCHAR}, 
      #{sex,jdbcType=CHAR}, #{age,jdbcType=CHAR}, #{phone,jdbcType=VARCHAR}, #{dorm,jdbcType=VARCHAR}, 
      #{cno,jdbcType=INTEGER}, #{uid,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.SMS.domain.Student">
    insert into t_student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        sid,
      </if>
      <if test="sno != null">
        sno,
      </if>
      <if test="sname != null">
        sname,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="dorm != null">
        dorm,
      </if>
      <if test="cno != null">
        cno,
      </if>
      <if test="uid != null">
        uid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="sno != null">
        #{sno,jdbcType=VARCHAR},
      </if>
      <if test="sname != null">
        #{sname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=CHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="dorm != null">
        #{dorm,jdbcType=VARCHAR},
      </if>
      <if test="cno != null">
        #{cno,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.SMS.domain.StudentExample" resultType="java.lang.Long">
    select count(*) from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_student
    <set>
      <if test="record.sid != null">
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.sno != null">
        sno = #{record.sno,jdbcType=VARCHAR},
      </if>
      <if test="record.sname != null">
        sname = #{record.sname,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=CHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=CHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.dorm != null">
        dorm = #{record.dorm,jdbcType=VARCHAR},
      </if>
      <if test="record.cno != null">
        cno = #{record.cno,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_student
    set sid = #{record.sid,jdbcType=INTEGER},
      sno = #{record.sno,jdbcType=VARCHAR},
      sname = #{record.sname,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=CHAR},
      age = #{record.age,jdbcType=CHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      dorm = #{record.dorm,jdbcType=VARCHAR},
      cno = #{record.cno,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.SMS.domain.Student">
    update t_student
    <set>
      <if test="sno != null">
        sno = #{sno,jdbcType=VARCHAR},
      </if>
      <if test="sname != null">
        sname = #{sname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=CHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="dorm != null">
        dorm = #{dorm,jdbcType=VARCHAR},
      </if>
      <if test="cno != null">
        cno = #{cno,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=BIGINT},
      </if>
    </set>
    where sid = #{sid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.SMS.domain.Student">
    update t_student
    set sno = #{sno,jdbcType=VARCHAR},
      sname = #{sname,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=CHAR},
      phone = #{phone,jdbcType=VARCHAR},
      dorm = #{dorm,jdbcType=VARCHAR},
      cno = #{cno,jdbcType=INTEGER},
      uid = #{uid,jdbcType=BIGINT}
    where sid = #{sid,jdbcType=INTEGER}
  </update>
</mapper>